function net = InitNet ( )
%% Network initialization
%% We initialize the network parameters according to the ADMM algorithm optimizing the baseline CS-MRI model.
%% Copyright (c) 2017 Yan Yang
%% All rights reserved.

%% network setting
config;
fN = nnconfig.FilterNumber;
fS = nnconfig.FilterSize;
WD = nnconfig.WeightDecay;
LL = nnconfig.LinearLabel;
stageN = nnconfig.Stage;
s = fS*fS;
% penalty parameters: \Rho
Rho = 1.0;
% update rate: \eta
Eta = 1.6;

m = nnconfig.ImageSize;
n = nnconfig.PartitionSize;
A = gen_A(m, m+n);
nnconfig.B = .8; %Rho*inv(eye(nnconfig.PartitionSize) + Rho*eye(nnconfig.PartitionSize));
[L U] = factor(A, Rho);
nnco
nnconfig.AULA = (A'*(U \ ( L \ (A) )));


% l1-penalty parameters
lambda1 = 0;
lambda2 = 0;
lambda = [lambda1; lambda2];
% lambda = 1;

%% Network structure
net.layers = {};
%the first stage
net.layers{end+1} = struct('type','X_org',...
    'learningRate', ones(1, 2, 'double'), ...
    'weightDecay', WD, ...
    'momentum', {{0,0}});
net.layers{end+1} = struct('type', 'Non_linorg',...
    'weights',{{lambda}},...
    'learningRate', ones(1, 1, 'double'), ...
    'weightDecay', WD, ...
    'momentum', {{0}});
net.layers{end+1} = struct('type', 'Multi_org',...
    'learningRate', ones(1, 1, 'double'), ...
    'weightDecay', WD, ...
    'momentum', {{0}});
%the middle stages
for i = 1:1:stageN-2
    net.layers{end+1} = struct('type', 'X_mid',...
        'learningRate', ones(1, 2, 'double'), ...
        'weightDecay', WD, ...
        'momentum', {{0,0}});
    net.layers{end+1} = struct('type', 'Non_linmid',...
        'weights',{{lambda}},...
        'learningRate', ones(1, 1, 'double'), ...
        'weightDecay', WD, ...
        'momentum', {{0}});
    net.layers{end+1} = struct('type', 'Multi_mid',...
        'learningRate', ones(1, 1, 'double'), ...
        'weightDecay', WD, ...
        'momentum', {{0}});
end
%the final stage
net.layers{end+1} = struct('type', 'X_mid',...
    'learningRate', ones(1, 2, 'double'), ...
    'weightDecay', WD, ...
    'momentum', {{0,0}});
net.layers{end+1} = struct('type', 'Non_linmid',...
    'weights',{{lambda}},...
    'learningRate', ones(1, 1, 'double'), ...
    'weightDecay', WD, ...
    'momentum', {{0}});
net.layers{end+1} = struct('type', 'Multi_final',...
    'learningRate', ones(1, 1, 'double'), ...
    'weightDecay', WD, ...
    'momentum', {{0}});
net.layers{end+1} = struct('type', 'X_final',...
    'learningRate', ones(1, 2, 'double'), ...
    'weightDecay', WD, ...
    'momentum', {{0,0}});
% loss layer
net.layers{end+1}.type = 'loss';
end





